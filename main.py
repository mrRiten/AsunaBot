import datetime
import threading
import requests
from bs4 import BeautifulSoup
import telebot as tl
from threading import Thread
import time
import json
import schedule as sch

# TelBotToken
bot = tl.TeleBot('Token')


def get_inf():

    # get URL
    Weather_URl = 'https://pogoda7.ru/prognoz/gorod943-Russia-Yaroslavskaya_oblast-Yaroslavl/1days/full'
    News_URL = 'https://news.mail.ru'
    EUR_RUB_URL = 'https://www.google.ru/search?q=–∫—É—Ä—Å+–µ–≤—Ä–æ&newwindow=1&sxsrf=ALiCzsbmIKfsc07wLE9uI4bWbSIobDDIBw%3A1663183301779&source=hp&ei=xSkiY-X7K-iJrwTA0Ib4BA&iflsig=AJiK0e8AAAAAYyI31XS_1auoVsGnOhUq4cRcKIsjaDWN&oq=–∫—É—Ä—Å+–µ–≤—Ä&gs_lcp=Cgdnd3Mtd2l6EAEYADIJCCMQJxBGEIICMggIABCABBCxAzIICAAQgAQQsQMyCwgAEIAEELEDEIMBMggIABCABBCxAzIFCAAQgAQyCAgAEIAEELEDMggIABCABBCxAzIFCAAQgAQyBQgAEIAEOgcIIxDqAhAnOgQIIxAnOgsILhCxAxCDARDUAjoLCC4QgAQQxwEQrwE6CAguEIAEELEDOgsILhCABBCxAxCDAVC3AViROWDWQGgCcAB4AYABwwGIAZAGkgEDNy4ymAEAoAEBsAEK&sclient=gws-wiz'
    USD_RUB_URL = 'https://www.google.ru/search?q=–∫—É—Ä—Å+–¥–æ–ª–ª–∞—Ä–∞&newwindow=1&sxsrf=ALiCzsZhuTfiBDkZ3oW2XvlDH5r1aE-r5Q%3A1662989007957&source=hp&ei=zzIfY7C5OOrJrgTrpYDICw&iflsig=AJiK0e8AAAAAYx9A37RprR8CGXkh12834Bi3o2qN2ErT&oq=–∫—É—Ä—Å+&gs_lcp=Cgdnd3Mtd2l6EAEYADIJCCMQJxBGEIICMgQIIxAnMgsIABCABBCxAxCDATILCAAQgAQQsQMQgwEyBQgAEIAEMggIABCABBCxAzIFCAAQgAQyCAgAEIAEELEDMgsIABCABBCxAxCDATILCAAQgAQQsQMQgwE6BwgjEOoCECc6CwguEIAEEMcBEK8BOggILhCxAxCDAToICAAQsQMQgwFQlw1YnRJglRloAXAAeAGAAcMBiAGjA5IBAzQuMZgBAKABAbABCg&sclient=gws-wiz'
    JPY_RUB_URL = 'https://www.google.ru/search?q=–∫—É—Ä—Å+–π–µ–Ω—ã&newwindow=1&sxsrf=AJOqlzWD96jS2WKtLBOeJ9hLg0aru6n39w%3A1677612906829&source=hp&ei=alf-Y7nxL-6krgTyzJOwBw&iflsig=AK50M_UAAAAAY_5leoYfJ1sMgHO-9JkTCM7yqAgVV6bP&oq=–∫—É—Ä—Å+–µ–Ω&gs_lcp=Cgdnd3Mtd2l6EAMYATIFCAAQgAQyDQgAEIAEELEDEIMBEAoyDQgAEIAEELEDEIMBEAoyBwgAEIAEEAoyBwgAEIAEEAoyBwgAEIAEEAoyBwgAEIAEEAoyBwgAEIAEEAoyBwgAEIAEEAoyBwgAEIAEEAo6BwgjEOoCECc6DQguEMcBEK8BEOoCECc6BAgjECc6CwgAEIAEELEDEIMBOgsILhCABBCxAxCDAToICAAQsQMQgwE6CwguEIAEEMcBEK8BOg4ILhCvARDHARDUAhCABDoICAAQgAQQsQM6CggAEIAEELEDEApQtgtY_SVg5T5oAnAAeAGAAfgDiAHdCpIBBzYuNC0xLjGYAQCgAQGwAQo&sclient=gws-wiz'
    headers = {'user-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36 OPR/90.0.4480.100 (Edition Yx GX)'}

    # parsing weather
    full_page_Weather = requests.get(Weather_URl, headers=headers)
    soup_Weather = BeautifulSoup(full_page_Weather.content, 'html.parser')
    weather_now = soup_Weather.findAll('div', {'class': 'grid precip'})

    # parsing USD from Google
    full_page_RUB_USD = requests.get(USD_RUB_URL, headers=headers)
    soupUSD_RUB = BeautifulSoup(full_page_RUB_USD.content, 'html.parser')
    ConvertUSD = soupUSD_RUB.findAll('span', {'class': 'DFlfde', 'class': 'SwHCTb', 'data-precision': 2})

    # parsing EUR from Google
    full_page_RUB_EUR = requests.get(EUR_RUB_URL, headers=headers)
    soupEUR_RUB = BeautifulSoup(full_page_RUB_EUR.content, 'html.parser')
    ConvertEUR = soupEUR_RUB.findAll('span', {'class': 'DFlfde', 'class': 'SwHCTb', 'data-precision': 2})

    # parsing JPY from Google
    full_page_RUB_JPY = requests.get(JPY_RUB_URL, headers=headers)
    soupJPY_RUB = BeautifulSoup(full_page_RUB_JPY.content, 'html.parser')
    ConvertJPY = soupJPY_RUB.findAll('span', {'class': 'DFlfde', 'class': 'SwHCTb', 'data-precision': 2})

    # parsing news Mail.ru
    full_page_News = requests.get(News_URL, headers=headers)
    soup_News = BeautifulSoup(full_page_News.content, 'html.parser')
    news = soup_News.findAll('div', {'class': 'cols__wrapper', 'class': 'cols__column cols__column_small_percent-50 cols__column_medium_percent-33 cols__column_large_percent-33'})

    # assignment text from Mail.ru news
    news_output0 = news[0].text
    news_output1 = news[1].text
    news_output2 = news[2].text
    news_output3 = news[3].text
    news_output4 = news[4].text
    news_output5 = news[5].text

    inf = f'üóì–°–µ–≥–æ–¥–Ω—è {datetime.datetime.now().strftime("%Y-%d-%m")}'\
        f'\n\n–ö—É—Ä—Å –î–æ–ª–ª–∞—Ä–∞: {ConvertUSD[0].text} —Ä—É–±–ª–µ–π'\
        f'\nüí∂–ö—É—Ä—Å –ï–≤—Ä–æ: {ConvertEUR[0].text} —Ä—É–±–ª–µ–π'\
        f'\nüí¥–ö—É—Ä—Å –ô–µ–Ω: {ConvertJPY[0].text} —Ä—É–±–ª–µ–π\n' \
          f'\n‚õÖ–ü–æ–≥–æ–¥–∞ \n{weather_now[0].text}' \
          f'\n\nüì∞–ù–æ–≤–æ—Å—Ç–∏:' \
          f'\nüìå{news_output0}' \
          f'\nüìå{news_output1}' \
          f'\nüìå{news_output2}' \
          f'\nüìå{news_output3}' \
          f'\nüìå{news_output4}' \
          f'\nüìå{news_output5}'

    print('Updated!')

    # writing loga to file
    with open('logs.txt', 'a') as file_obj:
        print(f'Updated at {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}', file=file_obj)
    file_obj.close()

    return inf


# Work bot code
# main inf
def main_inf():
    # open json
    with open('data.json', 'r') as file_obj:
        data_from_json = json.load(file_obj)
    # get user id for send message
    try:
        for user in data_from_json:
            name = data_from_json[f'{user}']['username']
            schedule_text = data_from_json[f'{user}']['schedule_text']
            bot.send_message(user, f'{name}, –±—É–¥—Ç–µ –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π!\n\n{get_inf()}\n\nüìë–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{schedule_text}')

            # write logs
            with open('logs.txt', 'a+') as logs_obj:
                print(f'{user} - bot send mes at {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}', file=logs_obj)
                logs_obj.close()
    except Exception as e:
        with open('logs.txt', 'a+') as logs_obj:
            print(f'{e} - {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}', file=logs_obj)
            logs_obj.close()


# create new thread
def create_th(message):
    send_main_th = Thread(target=main_mes, args=[message, ])
    send_main_th.start()
    print(threading.active_count())


# func for every time module
def main_mes(message):
    sch.every().day.at('09:10').do(main_inf)
    sch.every().day.at('20:10').do(main_inf)
    while True:
        sch.run_pending()
        time.sleep(1)


# func for checking message from user
def checking_text(message):
    error = 0
    ascii_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    digits = '0123456789'
    punctuation = '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ '
    rus_letters = '—ë–π—Ü—É–∫–µ–≥–Ω—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é–Å–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠–Ø–ß–°–ú–ò–¢–¨–ë–Æ'
    for letter in message.text:
        if letter in ascii_letters or letter in digits or letter in punctuation or letter in rus_letters or letter == '\n':
            pass
        else:
            error += 1
    if error == 0:
        return True
    else:
        return False


#   func for append note in data
def add_note_begin(message):
    # open json
    with open('data.json', 'r') as file_obj:
        data_from_json = json.load(file_obj)
    # get user id for send message
    user_id = message.from_user.id
    name = data_from_json[f'{user_id}']['username']
    bot.send_message(message.chat.id, f'{name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏')
    bot.register_next_step_handler(message, add_note_end)


def add_note_end(message):
    # open json
    if checking_text(message):
        with open('data.json', 'r') as file_obj:
            data_from_json = json.load(file_obj)
        # get user`s inf
        user_id = message.from_user.id
        note_text = str(message.text)
        data_from_json[f'{user_id}']['note_text'] += f'\n{note_text}'
        with open('data.json', 'w') as file_obj:
            json.dump(data_from_json, file_obj, indent=4, ensure_ascii=False)
        bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ, —è –¥–æ–±–∞–≤–∏–ª–∞ –∑–∞–º–µ—Ç–∫—É:\n "{data_from_json[f"{user_id}"]["note_text"]}" ')
        keyboard_work(message)
    else:
        bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü.—Å–∏–º–≤–æ–ª—ã')


# func for watch note
def watch_note(message):
    with open('data.json', 'r') as file_obj:
        data_from_json = json.load(file_obj)
    user_id = message.from_user.id
    name = data_from_json[f'{user_id}']['username']
    note = data_from_json[f'{user_id}']['note_text']
    bot.send_message(message.chat.id, f'{name}, –≤–æ—Ç –≤–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞:\n {note}')
    keyboard_work(message)


# func for del note
def delete_note(message):
    # open json
    with open('data.json', 'r') as file_obj:
        data_from_json = json.load(file_obj)
    # get user id for send message
    user_id = message.from_user.id
    name = data_from_json[f'{user_id}']['username']
    data_from_json[f'{user_id}']['note_text'] = ''
    with open('data.json', 'w') as file_obj:
        json.dump(data_from_json, file_obj, indent=4, ensure_ascii=False)
    bot.send_message(message.chat.id, f'{name}, —è —É–¥–∞–ª–∏–ª–∞ –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏')
    keyboard_work(message)


# func for append schedule in data
def add_schedule_begin(message):
    # open json
    with open('data.json', 'r') as file_obj:
        data_from_json = json.load(file_obj)
    # get user id for send message
    user_id = message.from_user.id
    name = data_from_json[f'{user_id}']['username']
    bot.send_message(message.chat.id, f'{name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
    bot.register_next_step_handler(message, add_schedule_end)


def add_schedule_end(message):
    if checking_text(message):
        # open json
        with open('data.json', 'r') as file_obj:
            data_from_json = json.load(file_obj)
        # get user`s inf
        user_id = message.from_user.id
        schedule_text = str(message.text)
        data_from_json[f'{user_id}']['schedule_text'] = f'{schedule_text}'
        with open('data.json', 'w') as file_obj:
            json.dump(data_from_json, file_obj, indent=4, ensure_ascii=False)
        bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ, —è –¥–æ–±–∞–≤–∏–ª–∞ –∏–∑–º–µ–Ω–∏–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n "{data_from_json[f"{user_id}"]["schedule_text"]}" ')
        keyboard_work(message)
    else:
        bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü.—Å–∏–º–≤–æ–ª—ã')


# func for watch note
def watch_schedule(message):
    with open('data.json', 'r') as file_obj:
        data_from_json = json.load(file_obj)
    user_id = message.from_user.id
    name = data_from_json[f'{user_id}']['username']
    schedule = data_from_json[f'{user_id}']['schedule_text']
    bot.send_message(message.chat.id, f'{name}, –≤–æ—Ç –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{schedule}')
    keyboard_work(message)


# func for edit appeal
def edit_appeal_begin(message):
    # open json
    with open('data.json', 'r') as file_obj:
        data_from_json = json.load(file_obj)
    # get user id for send message
    user_id = message.from_user.id
    name = data_from_json[f'{user_id}']['username']
    bot.send_message(message.chat.id, f'{name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—è—Ç–Ω–æ–µ –¥–ª—è –í–∞—Å –æ–±—Ä–∞—â–µ–Ω–∏–µ:')
    bot.register_next_step_handler(message, edit_appeal_end)


def edit_appeal_end(message):
    if checking_text(message):
        # open json
        with open('data.json', 'r') as file_obj:
            data_from_json = json.load(file_obj)
        # get user`s inf
        user_id = message.from_user.id
        appeal_text = str(message.text)
        data_from_json[f'{user_id}']['username'] = f'{appeal_text}'
        with open('data.json', 'w') as file_obj:
            json.dump(data_from_json, file_obj, indent=4, ensure_ascii=False)
        bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ, —è —Ç–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –í–∞–º: "{data_from_json[f"{user_id}"]["username"]}" ')
        keyboard_work(message)
    else:
        bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü.—Å–∏–º–≤–æ–ª—ã')


# func keyboard_work using very often
# it`s main keyboard
def keyboard_work(message):
    keyboard1 = tl.types.ReplyKeyboardMarkup(True, True, True)
    keyboard1.row('üì∞–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üìã–°–≤–æ–¥–∫–∞', 'üìì–ú–µ–Ω—é', '‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∞')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω–∞–¥–æ', reply_markup=keyboard1)


# keyboard for chose setting
def keyboard_setting(message):
    keyboard2 = tl.types.ReplyKeyboardMarkup(True, True, True)
    keyboard2.row('üóÑ–ó–∞–º–µ—Ç–∫–∏', 'üìë–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üëã–û–±—Ä–∞—â–µ–Ω–∏–µ')
    bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=keyboard2)


# keyboard for menu
def keyboard_menu(message):
    keyboard4 = tl.types.ReplyKeyboardMarkup(True, True, True)
    keyboard4.row('üóÑ—Å–º.–ó–∞–º–µ—Ç–∫–∏', 'üìë—Å–º.–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üëã—Å–º.–û–±—Ä–∞—â–µ–Ω–∏–µ')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboard4)


# keyboard for notes
def keyboard_notes(message):
    keyboard5 = tl.types.ReplyKeyboardMarkup(True, True, True)
    keyboard5.row('‚ûï–î–æ–±–∞–≤–∏—Ç—å', '‚ûñ–£–¥–∞–ª–∏—Ç—å')
    bot.send_message(message.chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.\n'
                                      '–ü—Ä–æ—à—É –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–∞ –∫–∞–∂–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤—Å–µ–≥–æ –æ–¥–∏–Ω —Å–ª–æ—Ç!', reply_markup=keyboard5)


# keyboard for schedule
def keyboard_schedule(message):
    keyboard5 = tl.types.ReplyKeyboardMarkup(True, True, True)
    keyboard5.row('‚ûï–ò–∑–º–µ–Ω–∏—Ç—å', '‚ûñ–£–±—Ä–∞—Ç—å')
    bot.send_message(message.chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å —Ä–∞–ø–∏—Å–∞–Ω–∏–µ.\n'
                                      '–ü—Ä–æ—à—É –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–∞ –∫–∞–∂–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤—Å–µ–≥–æ –æ–¥–∏–Ω —Å–ª–æ—Ç!', reply_markup=keyboard5)


# message handler
# start mes
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, get_inf())
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç ‚úå, –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /reg")


# create new threading(admin func)
# !using only ofter run bot!
@bot.message_handler(commands=['admin_start_bot'])
def start_message(message):
    create_th(message)
    bot.send_message(message.chat.id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–æ–∑–¥–∞–ª –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç—ã")
    # write logs
    with open('logs.txt', 'a+') as logs_obj:
        print(f'{message.from_user.id} - using admin func at {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}', file=logs_obj)
        logs_obj.close()


# register user in data
@bot.message_handler(commands=['reg'])
def start_message(message):
    # open JSON file
    with open('data.json', 'r') as file_obj:
        data_from_json = json.load(file_obj)
    # standard setting of user
    user_id = message.from_user.id
    username = message.from_user.username
    schedule_text = '–ü—É—Å—Ç–æ'
    note_text = ''
    # check user.id
    if str(user_id) not in data_from_json:
        data_from_json[user_id] = {"username": username, "schedule_text": schedule_text,
                                   "note_text": note_text}
    # append user in json
    with open('data.json', 'w') as file_obj:
        json.dump(data_from_json, file_obj, indent=4, ensure_ascii=False)
    bot.send_message(message.chat.id, f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã "
                                      f"–í–∞—à user_id {user_id}, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫–∏ –ø–æ–¥ —Å–µ–±—è")
    keyboard_work(message)

    # write logs
    with open('logs.txt', 'a+') as logs_obj:
        print(f'{user_id} - reg in bot at {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}', file=logs_obj)
        logs_obj.close()
    print(threading.active_count())


@bot.message_handler(content_types=['text'])
def main_message(message):
    # get inf by user
    if message.text == 'üì∞–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        bot.send_message(message.chat.id, get_inf())
        keyboard_work(message)
    # report
    elif message.text == 'üìã–°–≤–æ–¥–∫–∞':
        bot.send_message(message.chat.id, '–ú–µ–Ω—è –∑–æ–≤—É—Ç AsunaBot, —è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä—É—Ç–∏–Ω—ã,'
                                          ' —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –ø–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –º–æ—è —Ü–µ–ª—å - –¥–µ–ª–∞—Ç—å –≤–∞—à—É –∂–∏–∑–Ω—å –ø—Ä–æ—â–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π.'
                                          ' –ß—Ç–æ —è –º–æ–≥—É?\n–î–≤–∞ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å—ã–ª–∞—é –í–∞–º —Å–∂–∞—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ –±—ã –í—ã –±—ã–ª–∏ –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.'
                                          ' –¢–∞–∫ –∂–µ —è –º–æ–≥—É —Ö—Ä–∞–Ω–∏—Ç—å –í—ã—à–∏ –∑–∞–º–µ—Ç–∫–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å.\n'
                                          '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –í—ã –¥–æ–≤–µ—Ä–∏–ª–∏—Å—å –∏–º–µ–Ω–Ω–æ –º–Ω–µ. –í –±–µ–¥—É—â–µ–º –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç –µ—â—ë –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π!üò∏')
        bot.send_message(message.chat.id, '–ö—Å—Ç–∞—Ç–∏ –æ–¥–∏–Ω –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–æ–µ–≥–æ –∏–º–µ–Ω–∏(Asuna) - "–∑–∞–≤—Ç—Ä–∞", –æ—á–µ–Ω—å —Å–∏–º–≤–æ–ª—å—á–Ω–æ, –Ω–µ —Ç–∞–∫ –ª–∏?')
    # setting
    elif message.text == '‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∞':
        keyboard_setting(message)
    # appeal
    elif message.text == 'üëã–û–±—Ä–∞—â–µ–Ω–∏–µ':
        edit_appeal_begin(message)
    # menu
    elif message.text == 'üìì–ú–µ–Ω—é':
        keyboard_menu(message)
    # note
    elif message.text == 'üóÑ–ó–∞–º–µ—Ç–∫–∏':
        keyboard_notes(message)
    elif message.text == '‚ûï–î–æ–±–∞–≤–∏—Ç—å':
        add_note_begin(message)
    elif message.text == 'üóÑ—Å–º.–ó–∞–º–µ—Ç–∫–∏':
        watch_note(message)
    elif message.text == '‚ûñ–£–¥–∞–ª–∏—Ç—å':
        delete_note(message)
    # schedule
    elif message.text == 'üìë–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        keyboard_schedule(message)
    elif message.text == '‚ûï–ò–∑–º–µ–Ω–∏—Ç—å':
        add_schedule_begin(message)
    elif message.text == 'üìë—Å–º.–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        watch_schedule(message)


bot.polling()
print(threading.active_count())
